Macam2 implementasi graph

Adjacency List
Advantages: 
- Easy get neighbors
- butuh more time buat cek relasi
Disadvantages: Dalam kurung adalah tetangganya
0 => (1, 2) list[0]
1 => (2) list[1]
2 => (0, 1) list[2]
bisa direpresentasikan menggunakan List<List>, Array<List> Vector<list>, vector<vector>, hashmap<int, list>
Bagus untuk DFS dan BFS.

Adjacency Matrix: Di represent menggunakan matrix
Advantages: o(1) untuk cek relasi
Disadvantages ini adalah 
- too memory needed O(V^2)
- O(v) iterating tiap row for get neighbors


Edge List
Edges = {(0, 1), (0, 3), (0, 2), (2, 1)}
Jadi dia menjelaskan relasi menggunakan garis edges
List <triple<weight, source, dest>>

Implicit Graph (2D Matrix)
seperti mengisi color matrix, / shortest path. 
Jadi relasinya sudah diketahi relasi antara i,j dengan i, j+1 
biasanya menggunakan flood fill

Graph Applications:
1. Shortest Paths
2. Social Networks
3. Shortest Cyclic Rotue
4. Dependency Graphs
5. Routing Algorithms
6. Computation Graphs
7. Computer Vision
8. Web Crawlers
9. Physics & Chemistry
10. Graph Databases: Neo4j

Types of Graph
1. Weighted Graph
2. Unweighted Graph
3. Undirected Graph
4. Directed Graph